jobs:
- name: UnionClickLogFilterJob
  input: com.jd.ad.anti.cps.extractor.UnionClickLog
  filters:
  - filter_type: RuleFilter
    policy_id: 2001
    variables:
      REGISTER_SITES: com.jd.ad.anti.cps.variable.RegisterSite
      SOCIAL_REGISTER_SITES: com.jd.ad.anti.cps.variable.SocialRegisterSite
      THIRDPARTY_LIST: com.jd.ad.anti.cps.variable.ThirdpartyUnion
      WHITE_LIST: com.jd.ad.anti.cps.variable.NoReferWhiteList
      WEIBO_WHITELIST: com.jd.ad.anti.cps.variable.WeiboWhiteList
      ADT_WHITELIST: com.jd.ad.anti.cps.variable.AdTrafficTypeWhiteList
    rules:
    #
    # 过滤个人推广工具(31,117) or 微信\手Q通过API接口领取短链接(142), refer不匹配判作弊
    # 2018-02-07 京享街全部使用短链接方式，京乐享和京享街(17, 44) TargetUrl 策略全部废弃，改为使用refer策略，后面流量会全部切换到京粉(142)上
    - space: ad_traffic_type in [31, 17, 44, 117, 142] and platform == "pc"
      filter_space: refer != "refer" and refer != "norefer" and refer_host not in ["wx.qq.com", "wx2.qq.com", "qwd.jd.com"]
    #
    # 过滤CPS流量池中间页点击(75), refer不匹配判作弊
    - space: ad_traffic_type eq 75 and spread_type eq 3 and platform == "pc"
      filter_space: refer_host != "gou.jd.com"
    #
    # 过滤社交媒体推广(32), refer与备案不符判作弊
    - space: ad_traffic_type eq 32 and platform == "pc"
      filter_space: not SOCIAL_REGISTER_SITES.contains called (union_id, refer_host)
    #
    # 对有refer的url进行处理, refer与备案不符判作弊
    # 排除个人站长(31,32) 和 京乐享和京享街(17,44)
    # 2018-03-29: 排除cps聚合页(188), 3c联盟(164)
    # cps聚合页refer_host白名单"pro.m.jd.com"; 3c联盟refer_host白名单"3clm.jd.com"
    # cps流量池(adTrafficType=75)的站外点击 (adSpreadType=2) 也要走该判断流程
    - space: (ad_traffic_type not in [31, 32, 17, 44, 75] or (ad_traffic_type eq 75 and spread_type eq 2)) and platform == "pc"
      filter_space: refer != "refer" and refer != "norefer" and refer_host not in ["ads.union.jd.com", "ads-union.jd.com", "u.x.jd.com", "u-x.jd.com"] and not ADT_WHITELIST.contains called (ad_traffic_type, refer_host) and REGISTER_SITES.containKey called (union_id) and not REGISTER_SITES.contains called (union_id, refer)
    #
    # 对第三方联盟为refer和norefer且union_id不在白名单中的全部算作弊
    # 排除个人站长 和 京乐享和京享街
    # 2018-03-29:3c联盟ad_traffic_type=164 加入norefer白名单
    - space: ad_traffic_type not in [6,31,32,17,44,80,89,96,117,142,172,164] and platform == "pc" and THIRDPARTY_LIST.contains called (union_id)
      filter_space: (refer == "refer" or refer == "norefer") and not WHITE_LIST.contains called (union_id)
    #
    # 2017-11-11日更新规则: 个人站长推广并入流量6，用webtype区分推广方式,因此流量6单独进行norefer情况的判断
    # 个人站长(adt=6,webtype=11,12,13)
    # 过滤社交媒体推广(6, webtype = 12,13), refer与备案不符判作弊
    # 2018-03-29:weibo短链接推广会有norefer情况,添加联盟白名单weibo_whitelist, refer不空走该逻辑
    - space: ad_traffic_type in [6, 172] and webtype in [12, 13] and platform == "pc" and refer not in ["refer","norefer"]
      filter_space: not SOCIAL_REGISTER_SITES.contains called (union_id, refer_host)

    # 2018-03-29:weibo短链接推广会有refer, norefer情况, refer 为空,不在白名单中判作弊
    - space: ad_traffic_type in [6, 172] and webtype in [12, 13] and platform == "pc" and refer in ["refer","norefer"]
      filter_space: not WEIBO_WHITELIST.contains called (union_id)
    #
    # 过滤个人推广(聊天)工具(6, webtype=11), refer不匹配判作弊
    - space: ad_traffic_type in [6, 172] and webtype eq 11 and platform == "pc"
      filter_space: refer != "refer" and refer != "norefer" and refer_host != "wx.qq.com" and refer_host != "wx2.qq.com"
    #
    # 对adt=6第三方联盟为refer和norefer且union_id不在白名单中的全部算作弊
    # 排除个人站长
    - space: ad_traffic_type in [6, 172] and webtype not in [11,12,13] and platform == "pc" and THIRDPARTY_LIST.contains called (union_id)
      filter_space: (refer == "refer" or refer == "norefer") and not WHITE_LIST.contains called (union_id)
  - filter_type: RuleFilter
    policy_id: 2002
    variables:
      REGISTER_SITES: com.jd.ad.anti.cps.variable.RegisterSite
      THIRDPARTY_LIST: com.jd.ad.anti.cps.variable.ThirdpartyUnion
      WHITE_LIST: com.jd.ad.anti.cps.variable.NoReferWhiteList
    rules:
    # 对自建联盟为refer和norefer且union_id不在白名单中的全部算作弊
    # 排除个人站长 和 京乐享和京享街
    - space: ad_traffic_type not in [6,31,32,17,44,80,89,96,117,142,172,164] and platform == "pc" and not THIRDPARTY_LIST.contains called (union_id)
      filter_space: (refer == "refer" or refer == "norefer") and not WHITE_LIST.contains called (union_id)
    # 
    # 对adt=6中的自建联盟为refer和norefer且union_id不在白名单中的全部算作弊
    # 排除个人站长
    - space: ad_traffic_type in [6, 172] and webtype not in [11,12,13] and platform == "pc" and not THIRDPARTY_LIST.contains called (union_id)
      filter_space: (refer == "refer" or refer == "norefer") and not WHITE_LIST.contains called (union_id)
  - filter_type: DnsFilter
    # jda 用于标识同一用户，如果联盟切换则作弊
    policy_id: 201
    rules:
    - space: jda != ""
      group:
        group_key: jda
      click_time_diff_range:
        lower_seconds: 0
        upper_seconds: 10
      filter_space: true
  - filter_type: DnsFilter
    policy_id: 211
    rules:
    # click_ip+ua 用于标识同一用户，如果联盟切换则作弊
    - space: click_ip != "" and ua != "" and click_time != "" and jda_time != "" and jda_time != "-" and ad_traffic_type ne 80
      group:
        group_key: click_ip, ua
      click_time_diff_range: 
        lower_seconds: 0
        upper_seconds: 10
      filter_space: (click_seconds minus jda_time) le 10
  - filter_type: RuleFilter
    policy_id: 207
    rules:
    # cookie-stuffing策略: csid由服务器产生,为空则为非点击进入的广告;运营要求,排除部分流量(17-轻微店,44-京享街,89-开普勒,147-京东在身边)
    - space: ad_traffic_type not in [17,44,89,147]
      filter_space: csid == ""
  output: com.jd.ad.anti.cps.dumper.AntiUnionClickLog
- name: AppAllocateCpsClick1Log
  input: com.jd.ad.anti.cps.extractor.AppAllocateCpsClick1Log
  filters:
  - filter_type: DnsFilter
    # jda 用于标识同一用户，如果联盟切换则作弊
    policy_id: 209
    # 得到同一个用户10s内的作弊点击：10S内多个一跳点击属于不同联盟
    rules:
    - space: jda != ""
      group:
        group_key: jda
      click_time_diff_range:
        lower_seconds: 0
        upper_seconds: 10
      filter_space: click_id != ""
  output: com.jd.ad.anti.cps.dumper.AntiUnionClickLog
- name: GdmOnlineLogJob
  input: com.jd.ad.anti.cps.extractor.GdmOnlineLog
  filters:
  - filter_type: RuleFilter
    policy_id: 205
    variables:
      REGISTER_SITES: com.jd.ad.anti.cps.variable.RegisterSite
    rules:
    #click按照jda进行group,相同jda的click按照visit_times,sequence_nums排序
    #相邻2个点击的union_id不同,后一个union_id不为空且在联盟注册表中,refer为中间跳转页和域名，算作弊
    - space: true
      group:
        group_key: jda
        sort_key: visit_times,sequence_num
      filter_space: union_id ne PREV_union_id and union_id ne 0 and REGISTER_SITES.containKey called (union_id) and (REGISTER_SITES.contains called (union_id, refer) or refer ct "union.click.jd.com" or refer ct "gou.jd.com" or refer ct "union-click.jd.com")
      #filter_space: union_id ne prev_union_id and 
      #filter_space: true
  output: com.jd.ad.anti.cps.dumper.AntiInnerUnionLog
- name: OrderJoinClickLogFilterJob
  input: com.jd.ad.anti.cps.extractor.OrderJoinAntiClickLog
  filters:
  - filter_type: RuleFilter
    policy_id: 200
    rules:
    - space: policy_id == "2001"
      filter_space: true
    - space: policy_id == "2002"
      filter_space: sub_union_order_num ge 5 and (sub_union_policy_2002_order_num div sub_union_order_num) ge 0.1
  - filter_type: RuleFilter
    policy_id: 209
    rules:
    - space: policy_id == "209"
      filter_space: true
  - filter_type: RuleFilter
    policy_id: 201
    rules:
    - space: policy_id == "201"
      filter_space: true
  - filter_type: RuleFilter
    policy_id: 211
    rules:
    - space: policy_id == "211"
      filter_space: sub_union_policy_211_order_num gt 5 and sub_union_policy_211_jda_num gt 5 and (sub_union_policy_211_order_num div sub_union_order_num) gt 0.03 
  - filter_type: RuleFilter
    policy_id: 207
    rules:
    - space: true
      filter_space: policy_id == "207"
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
- name: OrderJoinInnerUnionJob
  input: com.jd.ad.anti.cps.extractor.OrderJoinInnerUnionLog
  filters:
  - filter_type: RuleFilter
    policy_id: 205
    variables:
      INNER_WHITE_LIST: com.jd.ad.anti.cps.variable.InnerWhiteList
    rules:
    #判断作弊,排除白名单
    - space: not (ad_traffic_type eq 142 and platform gt 1 ) and request_tm_diff ge 0 and order_request_tm_diff ge 0 and order_request_tm_diff le 86400 and not INNER_WHITE_LIST.contains called (union_id)
      filter_space: (request_tm_diff le 5 ) or (request_tm_diff le 10 and order_request_tm_diff gt 900 ) or (request_tm_diff le 15 and union_id_start ne 0 and order_request_tm_diff gt 1800 ) or (request_tm_diff le 20 and union_id_start eq 0 and order_request_tm_diff gt 1800 )
  output: com.jd.ad.anti.cps.dumper.AntiInnerOrderLog
- name: AntiInnerOrderJob
  input: com.jd.ad.anti.cps.extractor.OrderJoinInnerOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 205
    rules:
    #联盟总订单>5,联盟总jda>5,子联盟作弊比例>3%,过滤可能误判订单
    # 2018-06-24: 删除 京粉无线订单 (adt=142,platform > 1)
    - space: true
      filter_space: union_jda_num gt 5 and union_policy_205_order_num gt 5 and (sub_union_cheat_num div sub_union_order_num) gt 0.03 
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#CPS反刷单过滤
- name: AntiBrushOrderJob
  input: com.jd.ad.anti.cps.extractor.BrushOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 210
    rules:
    - space: true
      filter_space: true
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
# recall(扩召回)过滤:对于http(200),dns2(201),dns3(211)进行扩召回,子联盟订单数,作弊比例超过阈值,该子联盟订单全部判为作弊
- name: RecallOrderJob
  input: com.jd.ad.anti.cps.extractor.RecallUnionOrderLog
  filters:
  #http recall:子联盟订单>=20 and 子联盟作弊比例>=80%,只针对pc端订单
  - filter_type: RuleFilter
    policy_id: 202
    rules:
    - space: policy_id == "200" and platform eq 1 and sub_union_order_num ge 20
      filter_space: (sub_union_cheat_num div sub_union_order_num) ge 0.8 
  - filter_type: RuleFilter
  #dns2 recall:子联盟订单>=20 and 子联盟作弊比例>=50%,pc/无线端订单分别过滤
    policy_id: 203
    rules:
    - space: policy_id == "201" and sub_union_order_num ge 20
      filter_space: (sub_union_cheat_num div sub_union_order_num) ge 0.5
  - filter_type: RuleFilter
  #dns2 recall:子联盟订单>=20 and 子联盟作弊比例>=50%,pc/无线端订单分别过滤
    policy_id: 212
    rules:
    - space: policy_id == "211" and sub_union_order_num ge 20
      filter_space: (sub_union_cheat_num div sub_union_order_num) ge 0.5
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
- name: AntiUnionBlacklistJob
  input: com.jd.ad.anti.cps.extractor.UnionOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 206
    variables:
      UNION_BLACKLIST: com.jd.ad.anti.cps.variable.UnionBlacklist
    rules:
    - space: true
      filter_space: UNION_BLACKLIST.contains called (union_id, sub_union_id) or UNION_BLACKLIST.contains called (union_id, null_sub_union_id) or UNION_BLACKLIST.contains called (union_id, illegal_sub_union_id)
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#abnormal_user策略:下单pin为京东内部采购,不结佣
- name: AbnormalUserJob
  input: com.jd.ad.anti.cps.extractor.UnionOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 208
    rules:
    - space: true
      filter_space: user_pin in ["京东集团行政部", "政采办公电器"]
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#jda为空策略：pc上子联盟订单数>=50，且jda为空订单比例>=ratio,在空jda联盟黑名单中的,判作弊
# 2018-03-29: 初版上线,只针对ad_traffic_type=6 && pc中子联盟,设置黑名单控制订单量
# 2018-04-26: 1号店(adt=172), pc/mobile端 灰度上线,增加点击-下单时间差 阈值,控制过滤量
# 2018-05-10: 1号店全量,取消时间差阈值;流量6 pc 端全量,取消黑名单限制
# 2018-05-16: 流量6 灰度上线(+blacklist)
# 2018-06-07: 流量6 全量上线
- name: AbnormalJdaJob
  input: com.jd.ad.anti.cps.extractor.NullJdaOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 213
    rules:
    #
    # adt = 6, pc端: 2018-05-10日全量, 子联盟订单数>=50，且jda为空订单比例>=0.87 的jda缺失订单判作弊
    - space: ad_traffic_type eq 6 and device_type == "pc" and anti_jda == ""
      filter_space: sub_union_order_num ge 50 and (sub_union_null_jda_order_num div sub_union_order_num) ge 0.87
    #
    # adt = 6, mobile端: 2018-05-16日灰度, 子联盟订单数>=50，且jda为空订单比例>=0.8 的jda缺失订单, 且在黑名单中判作弊
    - space: ad_traffic_type eq 6 and device_type == "mobile" and anti_jda == ""
      filter_space: sub_union_order_num ge 50 and (sub_union_null_jda_order_num div sub_union_order_num) ge 0.8
    #
    # adt = 172, pc端:子联盟订单数>=50，且jda为空订单比例>=0.87 的jda缺失订单判作弊
    - space: ad_traffic_type eq 172 and device_type == "pc" and anti_jda == ""
      filter_space: sub_union_order_num ge 50 and (sub_union_null_jda_order_num div sub_union_order_num) ge 0.87
    #
    # adt = 172, mobile端: 子联盟订单数>=50，且jda为空订单比例>=0.8 的jda缺失订单判作弊
    - space: ad_traffic_type eq 172 and device_type == "mobile" and anti_jda == ""
      filter_space: sub_union_order_num ge 50 and (sub_union_null_jda_order_num div sub_union_order_num) ge 0.8
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#return策略过滤(反退货骗佣):对于完成时间在T-16天的订单,物流记录中存在退货/退件等关键词,认为该订单无效,不结佣
- name: ReturnOrderJob
  input: com.jd.ad.anti.cps.extractor.ReturnOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 401
    variables:
      RETURNKEYWORDS: com.jd.ad.anti.cps.variable.ReturnKeyWords
    rules:
    #过滤一个订单的全部物流记录,记录中包含过滤关键词,判为作弊
    - space: RETURNKEYWORDS.containKey called (carryInfo)
      filter_space: true
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#402 policy 拒收退货骗佣反作弊策略：对于使用第三方物流的cps订单，提取物流中的流经城市，若流经城市符合ABA的形式，认为发生了退货，判为402作弊。
- name: AddressOrderJob
  input: com.jd.ad.anti.cps.extractor.AddressOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 402
    variables:
      ADDRESSLIST: com.jd.ad.anti.cps.variable.AddressList
    rules:
    - space: ADDRESSLIST.containKey called (carryInfo)
      filter_space: true
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#京享街风控策略:对于京享街(ad_traffic_type=17,44)订单,若其马甲账号订单(cheat_type=17), 判为作弊
#京享街风控订单表app_jxj_risk_order: 利用访问过同一机器的不同pin来识别马甲账号,将其订单判为马甲订单
- name: RiskOrderLogJob
  input: com.jd.ad.anti.cps.extractor.RiskOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 403
    variables:
      WHITE_LIST: com.jd.ad.anti.cps.variable.NoReferWhiteList
    rules:
    - space: true
      filter_space: cheat_type eq 17 and not WHITE_LIST.contains called (union_id)
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
#恶意首次购反作弊策略: 拼接上游产出app_cps_union_new_ref_status_result表, 得到恶意首次购作弊订单
- name: AliasOrderLogJob
  input: com.jd.ad.anti.cps.extractor.AliasOrderLog
  filters:
  - filter_type: RuleFilter
    policy_id: 405
    rules:
    - space: true 
      filter_space: true 
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
# 导出作弊订单到order_result表,被多个policy_id命中的同一个order_id,会按照policy_id优先级进行去重
# policy_id优先级：200>>201>>202>>203>>205>>206>>207>>209>>211>>212
- name: MergeFraudOrder
  input: com.jd.ad.anti.cps.extractor.UnionAntiOrderLog
  output: com.jd.ad.anti.cps.dumper.AntiOrderLog
# 导出订单结果到order_detail表(作弊、非作弊订单均包括)
- name: FraudOrderDetail
  input: com.jd.ad.anti.cps.extractor.UnionAntiOrderDetailLog
  output: com.jd.ad.anti.cps.dumper.AntiOrderDetailResultLog
